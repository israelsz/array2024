m <- ncol(pop)  # Número de funciones objetivo
# Inicializamos las distancias de hacinamiento
distances <- rep(0, n)
# Iteramos sobre cada frente
for (front in ranking) {
frontSize <- length(front)
if (frontSize < 3) {
# Si hay menos de 3 soluciones en el frente, todas las distancias son Inf
distances[front] <- Inf
} else {
# Para cada función objetivo, calculamos la distancia de hacinamiento
for (j in 1:m) {
# Ordenamos el frente de acuerdo con los valores de la función objetivo j
sortedFront <- front[order(pop[front, j])]
# Asignamos Inf a las soluciones extremas (primera y última)
distances[sortedFront[1]] <- Inf
distances[sortedFront[frontSize]] <- Inf
# Calculamos las distancias para las soluciones intermedias
for (k in 2:(frontSize - 1)) {
prev <- sortedFront[k - 1]
next <- sortedFront[k + 1]
distances[sortedFront[k]] <- distances[sortedFront[k]] +
(pop[next, j] - pop[prev, j]) / (max(pop[, j]) - min(pop[, j]))
}
}
}
}
return(distances)
}
# 3. Calculamos las distancias de hacinamiento usando la función personalizada
crowdingDistances <- crowdingDistance(population, ranking)
# Creamos una población de 10 soluciones con 2 funciones objetivo cada una
population <- matrix(c(1, 5,
2, 4,
3, 7,
6, 2,
5, 3,
3, 5,
7, 1,
4, 6,
8, 2,
6, 4), nrow=10, byrow=TRUE)
library("nsga2R")
# Mostramos la población (solo con funciones objetivo)
print("Población con valores de funciones objetivo:")
print(population)
# 1. Utilizamos fastNonDominatedSorting para clasificar las soluciones en frentes
ranking <- fastNonDominatedSorting(population)
# Mostramos los frentes
print("Frentes de no dominación:")
print(ranking)
# 2. Calculamos el rango de cada función objetivo (min-max)
# El rango es necesario para normalizar las distancias de hacinamiento
objRange <- apply(population, 2, max) - apply(population, 2, min)
# 3. Utilizamos crowdingDist4frnt para calcular la distancia de hacinamiento dentro de cada frente
crowdingDistances <- crowdingDist4frnt(population, ranking, objRange)
# Paso 1: Crear una población de 10 soluciones con 2 funciones objetivo
# Cada fila de la matriz representa una solución con dos funciones objetivo
population <- matrix(c(1, 5,   # Solución 1: [1, 5]
2, 4,   # Solución 2: [2, 4]
3, 7,   # Solución 3: [3, 7]
6, 2,   # Solución 4: [6, 2]
5, 3,   # Solución 5: [5, 3]
3, 5,   # Solución 6: [3, 5]
7, 1,   # Solución 7: [7, 1]
4, 6,   # Solución 8: [4, 6]
8, 2,   # Solución 9: [8, 2]
6, 4),  # Solución 10: [6, 4]
nrow=10, byrow=TRUE)
# Paso 1: Crear una población de 10 soluciones con 2 funciones objetivo
# Cada fila de la matriz representa una solución con dos funciones objetivo
population <- matrix(c(1, 5,   # Solución 1: [1, 5]
2, 4,   # Solución 2: [2, 4]
3, 7,   # Solución 3: [3, 7]
6, 2,   # Solución 4: [6, 2]
5, 3,   # Solución 5: [5, 3]
3, 5,   # Solución 6: [3, 5]
7, 1,   # Solución 7: [7, 1]
4, 6,   # Solución 8: [4, 6]
8, 2,   # Solución 9: [8, 2]
6, 4),  # Solución 10: [6, 4]
nrow=10, byrow=TRUE)
# Mostrar la población (valores de las dos funciones objetivo)
print("Población con valores de funciones objetivo:")
print(population)
# Paso 2: Aplicar la función fastNonDominatedSorting
# Clasificamos las soluciones en frentes de no dominación
ranking <- fastNonDominatedSorting(population)
# Mostramos los frentes de no dominación
print("Frentes de no dominación (índices de las soluciones):")
print(ranking)
# Paso 3: Calcular el rango de cada función objetivo (máximo - mínimo)
# Este rango es necesario para calcular la distancia de hacinamiento
objRange <- apply(population, 2, max) - apply(population, 2, min)
objRange
# Mostramos los rangos de las funciones objetivo
print("Rangos de las funciones objetivo (para normalización):")
print(objRange)
# Mostramos los rangos de las funciones objetivo
print("Rangos de las funciones objetivo (para normalización):")
print(objRange)
# Paso 4: Aplicar crowdingDist4frnt para calcular la distancia de hacinamiento
# Esta función calcula la distancia de hacinamiento para cada solución en su frente
crowdingDistances <- crowdingDist4frnt(population, ranking, objRange)
# Cargamos librerías necesarias
library(mco)
# Paso 1: Crear una población de 10 soluciones con 2 funciones objetivo
population <- matrix(c(1, 5,   # Solución 1: [1, 5]
2, 4,   # Solución 2: [2, 4]
3, 7,   # Solución 3: [3, 7]
6, 2,   # Solución 4: [6, 2]
5, 3,   # Solución 5: [5, 3]
3, 5,   # Solución 6: [3, 5]
7, 1,   # Solución 7: [7, 1]
4, 6,   # Solución 8: [4, 6]
8, 2,   # Solución 9: [8, 2]
6, 4),  # Solución 10: [6, 4]
nrow=10, byrow=TRUE)
# Mostrar la población
print("Población con valores de funciones objetivo:")
print(population)
# Paso 2: Aplicar la función fastNonDominatedSorting para clasificar las soluciones en frentes
ranking <- fastNonDominatedSorting(population)
# Mostrar los frentes de no dominación
print("Frentes de no dominación (índices de las soluciones):")
print(ranking)
# Paso 3: Calcular el rango de cada función objetivo (máximo - mínimo)
# Este rango es necesario para calcular la distancia de hacinamiento
objRange <- apply(population, 2, max) - apply(population, 2, min)
# Mostrar los rangos de las funciones objetivo
print("Rangos de las funciones objetivo:")
print(objRange)
# Paso 4: Definir una función para manejar frentes pequeños en crowdingDist4frnt
safeCrowdingDist4frnt <- function(pop, ranking, objRange) {
# Inicializar matriz para almacenar distancias de hacinamiento
crowdingDist <- matrix(0, nrow=nrow(pop), ncol=ncol(pop))
# Iterar sobre cada frente
for (i in 1:length(ranking)) {
front <- ranking[[i]]
# Verificar si el frente tiene menos de 3 soluciones
if (length(front) < 3) {
# Si el frente tiene menos de 3 soluciones, asignar Inf a todas las soluciones
crowdingDist[front, ] <- Inf
} else {
# Si el frente tiene 3 o más soluciones, calcular la distancia de hacinamiento normalmente
crowdingDist[front, ] <- crowdingDist4frnt(pop[front, ], list(1:length(front)), objRange)
}
}
return(crowdingDist)
}
# Paso 5: Calcular las distancias de hacinamiento utilizando la función segura
crowdingDistances <- safeCrowdingDist4frnt(population, ranking, objRange)
# Cargamos librerías necesarias
library(mco)
# Paso 1: Crear una población de 10 soluciones con 2 funciones objetivo
population <- matrix(c(1, 5,   # Solución 1: [1, 5]
2, 4,   # Solución 2: [2, 4]
3, 7,   # Solución 3: [3, 7]
6, 2,   # Solución 4: [6, 2]
5, 3,   # Solución 5: [5, 3]
3, 5,   # Solución 6: [3, 5]
7, 1,   # Solución 7: [7, 1]
4, 6,   # Solución 8: [4, 6]
8, 2,   # Solución 9: [8, 2]
6, 4),  # Solución 10: [6, 4]
nrow=10, byrow=TRUE)
# Mostrar la población
print("Población con valores de funciones objetivo:")
print(population)
# Paso 2: Aplicar la función fastNonDominatedSorting para clasificar las soluciones en frentes
ranking <- fastNonDominatedSorting(population)
# Mostrar los frentes de no dominación
print("Frentes de no dominación (índices de las soluciones):")
print(ranking)
# Paso 3: Inicializamos el índice de niveles de no dominación para cada solución
popSize <- nrow(population)
rnkIndex <- integer(popSize)
# Iterar sobre cada frente y asignar el nivel de no dominación
i <- 1
while (i <= length(ranking)) {
rnkIndex[ranking[[i]]] <- i
i <- i + 1
}
# Agregamos el nivel de no dominación a la población para tener la estructura completa
population <- cbind(population, rnkIndex)
# Paso 4: Calcular el rango de cada función objetivo (máximo - mínimo)
# Este rango es necesario para calcular la distancia de hacinamiento
objRange <- apply(population[, 1:2], 2, max) - apply(population[, 1:2], 2, min)
# Mostrar los rangos de las funciones objetivo
print("Rangos de las funciones objetivo:")
print(objRange)
# Paso 5: Definir una función para manejar frentes pequeños en crowdingDist4frnt
safeCrowdingDist4frnt <- function(pop, ranking, objRange) {
# Inicializar una matriz para almacenar distancias de hacinamiento
crowdingDist <- matrix(0, nrow=nrow(pop), ncol=ncol(pop))
# Iterar sobre cada frente
for (i in 1:length(ranking)) {
front <- ranking[[i]]
# Verificar si el frente tiene menos de 3 soluciones
if (length(front) < 3) {
# Si el frente tiene menos de 3 soluciones, asignar Inf a todas las soluciones
crowdingDist[front, 1:2] <- Inf  # Solo para las dos columnas de objetivos
} else {
# Si el frente tiene 3 o más soluciones, calcular la distancia de hacinamiento normalmente
crowdingDist[front, 1:2] <- crowdingDist4frnt(pop[front, 1:2], list(1:length(front)), objRange)
}
}
return(crowdingDist)
}
# Paso 6: Calcular las distancias de hacinamiento utilizando la función segura
crowdingDistances <- safeCrowdingDist4frnt(population, ranking, objRange)
popSize <- 50
lowerBounds <- rep(0,30)
upperBounds <- rep(1,30)
varNo <- length(lowerBounds)
objDim <- 2
set.seed(1234)
# Generamos una población aleatoria de 50 soluciones con 30 variables de decisión
population <- t(sapply(1:popSize, function(u) array(runif(length(lowerBounds), lowerBounds, upperBounds))))
# Añadimos las funciones objetivo ZDT2 para cada solución en la población
population <- cbind(population, t(apply(population, 1, zdt2)))
# Clasificamos las soluciones en frentes de no dominación usando fastNonDominatedSorting
ranking <- fastNonDominatedSorting(population[,(varNo+1):(varNo+objDim)])
# Creamos un índice de los frentes
rnkIndex <- integer(popSize)
i <- 1
while (i <= length(ranking)) {
rnkIndex[ranking[[i]]] <- i
i <- i + 1
}
# Agregamos el rango de no dominación a la población
population <- cbind(population, rnkIndex)
# Calculamos el rango de cada función objetivo (máximo - mínimo)
objRange <- apply(population[,(varNo+1):(varNo+objDim)], 2, max) -
apply(population[,(varNo+1):(varNo+objDim)], 2, min)
# Calculamos las distancias de hacinamiento usando crowdingDist4frnt
cd <- crowdingDist4frnt(population, ranking, objRange)
# Mostramos las distancias de hacinamiento
cd
# Supongamos que ya tienes los puntajes de parsimonia y verosimilitud de cada red
# Aquí solo simulo estos valores, pero tú ya los tendrías calculados
# Criterios: Parsimonia y Verosimilitud (como las funciones objetivo)
parsimonia <- c(50, 48, 55, 53, 47, 60, 52, 54, 49, 51)
verosimilitud <- c(-300, -305, -290, -295, -310, -280, -302, -298, -307, -299)
# Crear la población que contiene estos dos criterios para cada red
# Aquí cada fila representa una red y las dos columnas son sus puntajes
population <- cbind(parsimonia, verosimilitud)
population
# Paso 1: Aplicar fastNonDominatedSorting para clasificar las redes en frentes
ranking <- fastNonDominatedSorting(population)
ranking
# Paso 2: Calcular el rango de cada función objetivo (máximo - mínimo)
# Este rango es necesario para calcular la distancia de hacinamiento
objRange <- apply(population, 2, max) - apply(population, 2, min)
# Paso 3: Aplicar crowdingDist4frnt para calcular la distancia de hacinamiento
crowdingDistances <- crowdingDist4frnt(population, ranking, objRange)
# Mostrar las distancias de hacinamiento para cada red
print("Distancias de hacinamiento por red:")
print(crowdingDistances)
# Generamos 100 redes con valores de parsimonia y verosimilitud simulados
# Supongamos que los valores de parsimonia están entre 40 y 70
# Y los valores de verosimilitud entre -350 y -250
parsimonia <- runif(100, min=40, max=70)  # 100 valores de parsimonia aleatorios
verosimilitud <- runif(100, min=-350, max=-250)  # 100 valores de verosimilitud aleatorios
# Crear la población que contiene estos dos criterios para cada red
population <- cbind(parsimonia, verosimilitud)
# Paso 1: Aplicar fastNonDominatedSorting para clasificar las redes en frentes
ranking <- fastNonDominatedSorting(population)
ranking
# Paso 2: Calcular el rango de cada función objetivo (máximo - mínimo)
# Este rango es necesario para calcular la distancia de hacinamiento
objRange <- apply(population, 2, max) - apply(population, 2, min)
# Paso 3: Aplicar crowdingDist4frnt para calcular la distancia de hacinamiento
crowdingDistances <- crowdingDist4frnt(population, ranking, objRange)
# Paso 3: Aplicar crowdingDist4frnt para calcular la distancia de hacinamiento
crowdingDistances <- crowdingDist4frnt(population, ranking, objRange)
# Paso 3: Aplicar crowdingDist4frnt para calcular la distancia de hacinamiento
crowdingDistances <- crowdingDist4frnt(population, ranking, objRange)
parsimonia <- runif(100, min=40, max=70)  # 100 valores de parsimonia aleatorios
verosimilitud <- runif(100, min=-350, max=-250)  # 100 valores de verosimilitud aleatorios
# Crear la población que contiene estos dos criterios para cada red
population <- cbind(parsimonia, verosimilitud)
# Paso 1: Aplicar fastNonDominatedSorting para clasificar las redes en frentes
ranking <- fastNonDominatedSorting(population)
# Paso 2: Calcular el rango de cada función objetivo (máximo - mínimo)
# Este rango es necesario para calcular la distancia de hacinamiento
objRange <- apply(population, 2, max) - apply(population, 2, min)
# Paso 3: Aplicar crowdingDist4frnt para calcular la distancia de hacinamiento
crowdingDistances <- crowdingDist4frnt(population, ranking, objRange)
# Paso 3: Aplicar crowdingDist4frnt para calcular la distancia de hacinamiento
crowdingDistances <- crowdingDist4frnt(population, ranking, objRange)
# Paso 3: Aplicar crowdingDist4frnt para calcular la distancia de hacinamiento
crowdingDistances <- crowdingDist4frnt(population, ranking, objRange)
# Generamos 100 redes con valores de parsimonia y verosimilitud simulados
parsimonia <- runif(100, min=40, max=70)  # 100 valores de parsimonia aleatorios
verosimilitud <- runif(100, min=-350, max=-250)  # 100 valores de verosimilitud aleatorios
# Crear la población que contiene estos dos criterios para cada red
population <- cbind(parsimonia, verosimilitud)
# Paso 1: Aplicar fastNonDominatedSorting para clasificar las redes en frentes
ranking <- fastNonDominatedSorting(population)
# Paso 2: Calcular el rango de cada función objetivo (máximo - mínimo)
objRange <- apply(population, 2, max) - apply(population, 2, min)
# Paso 3: Función ajustada para manejar frentes pequeños
safeCrowdingDist4frnt <- function(pop, ranking, objRange) {
# Inicializar la matriz de distancias de hacinamiento
crowdingDist <- matrix(0, nrow=nrow(pop), ncol=ncol(pop))
# Iterar sobre cada frente
for (i in 1:length(ranking)) {
front <- ranking[[i]]
# Verificar si el frente tiene menos de 3 soluciones
if (length(front) < 3) {
# Si el frente tiene menos de 3 soluciones, asignar Inf
crowdingDist[front, 1:2] <- Inf
} else {
# Calcular la distancia de hacinamiento normalmente
crowdingDist[front, 1:2] <- crowdingDist4frnt(pop[front, 1:2], list(1:length(front)), objRange)
}
}
return(crowdingDist)
}
# Paso 4: Calcular las distancias de hacinamiento utilizando la función ajustada
crowdingDistances <- safeCrowdingDist4frnt(population, ranking, objRange)
# Generamos 100 redes con valores de parsimonia y verosimilitud simulados
parsimonia <- runif(100, min=40, max=70)  # 100 valores de parsimonia aleatorios
verosimilitud <- runif(100, min=-350, max=-250)  # 100 valores de verosimilitud aleatorios
# Crear la población que contiene estos dos criterios para cada red
population <- cbind(parsimonia, verosimilitud)
# Paso 1: Aplicar fastNonDominatedSorting para clasificar las redes en frentes
ranking <- fastNonDominatedSorting(population)
# Paso 2: Calcular el rango de cada función objetivo (máximo - mínimo)
objRange <- apply(population, 2, max) - apply(population, 2, min)
# Paso 3: Función manual para calcular las distancias de hacinamiento
calculateCrowdingDistance <- function(pop, ranking, objRange) {
n <- nrow(pop)  # Número de soluciones en la población
m <- ncol(pop)  # Número de funciones objetivo (2 en este caso: parsimonia y verosimilitud)
# Inicializamos un vector de distancias de hacinamiento en 0
distances <- rep(0, n)
# Iteramos sobre cada frente
for (front in ranking) {
frontSize <- length(front)
if (frontSize < 3) {
# Si el frente tiene menos de 3 soluciones, asignamos Inf a todas
distances[front] <- Inf
} else {
# Para cada función objetivo, calculamos las distancias de hacinamiento
for (j in 1:m) {
# Ordenamos el frente de acuerdo con los valores de la función objetivo j
sortedFront <- front[order(pop[front, j])]
# Asignamos Inf a las soluciones extremas (primera y última)
distances[sortedFront[1]] <- Inf
distances[sortedFront[frontSize]] <- Inf
# Calculamos las distancias para las soluciones intermedias
for (k in 2:(frontSize - 1)) {
prev <- sortedFront[k - 1]
next <- sortedFront[k + 1]
distances[sortedFront[k]] <- distances[sortedFront[k]] +
(pop[next, j] - pop[prev, j]) / objRange[j]
}
}
}
}
return(distances)
}
# Paso 4: Calcular las distancias de hacinamiento manualmente
crowdingDistances <- calculateCrowdingDistance(population, ranking, objRange)
install.packages("emoa",dependencies = TRUE)
library("nsga2R")
library("nsga2R")
library("emoa")
# Generamos 100 redes con valores de parsimonia y verosimilitud simulados
parsimonia <- runif(100, min=40, max=70)  # 100 valores de parsimonia aleatorios
verosimilitud <- runif(100, min=-350, max=-250)  # 100 valores de verosimilitud aleatorios
# Crear la población que contiene estos dos criterios para cada red
population <- cbind(parsimonia, verosimilitud)
# Paso 1: Aplicar fastNonDominatedSorting para clasificar las redes en frentes
ranking <- fastNonDominatedSorting(population)
result <- crowding_distance(ranking)
ranking
result <- crowding_distance(ranking[[1]])
# Cargar la librería emoa
library(emoa)
parsimonia <- runif(100, min=40, max=70)  # 100 valores de parsimonia aleatorios
verosimilitud <- runif(100, min=-350, max=-250)  # 100 valores de verosimilitud aleatorios
# Crear la población que contiene estos dos criterios para cada red
population <- cbind(parsimonia, verosimilitud)
# Paso 1: Aplicar fastNonDominatedSorting para clasificar las redes en frentes
ranking <- fastNonDominatedSorting(population)
# Paso 2: Función personalizada para calcular la distancia de hacinamiento
calculate_crowding_distance <- function(pop, ranking) {
# Inicializar un vector para almacenar las distancias
distances <- rep(0, nrow(pop))
# Iterar sobre cada frente en ranking
for (i in 1:length(ranking)) {
front <- ranking[[i]]  # Obtener las soluciones del frente actual
if (length(front) < 2) {
# Si el frente tiene menos de 2 soluciones, asignar Inf
distances[front] <- Inf
} else {
# Calcular la distancia de hacinamiento con la función crowding_distance de emoa
front_values <- pop[front, ]  # Valores de las soluciones en el frente
distances[front] <- crowding_distance(front_values)  # Aplicar crowding_distance
}
}
return(distances)
}
# Paso 3: Calcular las distancias de hacinamiento
crowdingDistances <- calculate_crowding_distance(population, ranking)
# Paso 4: Agregar las distancias de hacinamiento a la población y ordenarla
population_with_dist <- data.frame(population, crowding_dist = crowdingDistances)
population_with_dist$ranking <- unlist(lapply(1:length(ranking), function(i) rep(i, length(ranking[[i]]))))
# Ordenar por ranking y por crowding_dist (de mayor a menor)
population_with_dist <- population_with_dist[order(population_with_dist$ranking, -population_with_dist$crowding_dist),]
# Mostrar las primeras 10 soluciones
head(population_with_dist, 10)
# Cargar la librería emoa
library(emoa)
# Simular 100 valores de parsimonia y verosimilitud
set.seed(123)
parsimonia <- runif(100, min=40, max=70)  # 100 valores de parsimonia aleatorios
verosimilitud <- runif(100, min=-350, max=-250)  # 100 valores de verosimilitud aleatorios
# Crear la población que contiene estos dos criterios para cada red
population <- cbind(parsimonia, verosimilitud)
# Paso 1: Aplicar fastNonDominatedSorting para clasificar las redes en frentes
ranking <- fastNonDominatedSorting(population)
# Paso 2: Inicializamos las distancias de hacinamiento
crowdingDistances <- rep(0, nrow(population))
# Paso 3: Función para calcular las distancias de hacinamiento para cada frente
calculate_crowding_distance <- function(pop, ranking) {
n <- nrow(pop)  # Número de soluciones en la población
# Inicializamos un vector de distancias de hacinamiento en 0
distances <- rep(0, n)
# Iteramos sobre cada frente
for (front in ranking) {
front_values <- pop[front, ]  # Extraer solo las soluciones de este frente
if (length(front) < 3) {
# Si el frente tiene menos de 3 soluciones, asignamos Inf a todas
distances[front] <- Inf
} else {
# Calcular la distancia de hacinamiento para este frente
distances[front] <- crowding_distance(as.matrix(front_values))
}
}
return(distances)
}
# Paso 4: Calcular las distancias de hacinamiento manualmente
crowdingDistances <- calculate_crowding_distance(population, ranking)
# Paso 5: Agregar las distancias de hacinamiento a la población
population_with_dist <- data.frame(population, crowding_dist = crowdingDistances, ranking = unlist(lapply(ranking, function(x, i) rep(i, length(x)), seq_along(ranking))))
# Mostrar las primeras 10 distancias de hacinamiento
head(population_with_dist, 10)
# Implementación ajustada de crow_distance para parsimonia y verosimilitud
crow_distance <- function(table_fitness) {
# Paso 1: Extraer las funciones objetivo (parsimonia y verosimilitud)
fitness_values <- as.matrix(table_fitness[, 1:2])
# Paso 2: Calcular la distancia de hacinamiento con crowding_distance
# Transponemos la matriz de funciones objetivo y pasamos a crowding_distance
distances <- crowding_distance(t(fitness_values))
# Paso 3: Agregar las distancias de hacinamiento a la tabla de fitness
table_fitness <- data.frame(table_fitness, crow_dist = distances)
# Paso 4: Ordenar la tabla por ranking y luego por distancia de hacinamiento en orden descendente
# Asumimos que la columna "ranking" ya está calculada y presente en table_fitness
table_fitness <- table_fitness[with(table_fitness, order(ranking, -crow_dist)),]
# Devolver la tabla con las distancias de hacinamiento incluidas
return(table_fitness)
}
# Simular 100 valores de parsimonia y verosimilitud
set.seed(123)
parsimonia <- runif(100, min=40, max=70)  # 100 valores de parsimonia aleatorios
verosimilitud <- runif(100, min=-350, max=-250)  # 100 valores de verosimilitud aleatorios
ranking <- sample(1:5, 100, replace = TRUE)  # Asumimos que ya tienes un ranking de frentes
# Crear la tabla de fitness que contiene parsimonia, verosimilitud y ranking
table_fitness <- data.frame(parsimonia, verosimilitud, ranking)
table_fitness
# Aplicar la función para calcular la distancia de hacinamiento
result <- crow_distance(table_fitness)
# Mostrar las primeras filas del resultado
head(result, 10)
# Implementación ajustada de crow_distance para parsimonia y verosimilitud
crow_distance <- function(table_fitness) {
# Paso 1: Extraer las funciones objetivo (parsimonia y verosimilitud)
fitness_values <- as.matrix(table_fitness[, 1:2])
# Paso 2: Calcular la distancia de hacinamiento con crowding_distance
# Transponemos la matriz de funciones objetivo y pasamos a crowding_distance
distances <- crowding_distance(t(fitness_values))
# Paso 3: Agregar las distancias de hacinamiento a la tabla de fitness
table_fitness <- data.frame(table_fitness, crow_dist = distances)
# Paso 4: Ordenar la tabla por ranking y luego por distancia de hacinamiento en orden descendente
# Asumimos que la columna "ranking" ya está calculada y presente en table_fitness
table_fitness <- table_fitness[with(table_fitness, order(ranking, -crow_dist)),]
# Devolver la tabla con las distancias de hacinamiento incluidas
return(table_fitness)
}
parsimonia <- runif(100, min=40, max=70)  # 100 valores de parsimonia aleatorios
verosimilitud <- runif(100, min=-350, max=-250)  # 100 valores de verosimilitud aleatorios
# Crear la tabla de fitness que contiene parsimonia y verosimilitud
population <- data.frame(parsimonia, verosimilitud)
# Calcular el ranking usando fastNonDominatedSorting
ranking <- fastNonDominatedSorting(as.matrix(population))
ranking
# Crear una columna de ranking para cada solución basada en fastNonDominatedSorting
# Las soluciones en el mismo frente reciben el mismo ranking
ranking_vector <- integer(nrow(population))
for (i in seq_along(ranking)) {
ranking_vector[ranking[[i]]] <- i
}
# Agregar el ranking a la tabla de fitness
population$ranking <- ranking_vector
population
# Aplicar la función para calcular la distancia de hacinamiento
result <- crow_distance(population)
# Mostrar las primeras filas del resultado
head(result, 10)
