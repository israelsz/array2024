library("cluster") #Instalat
library('clusteval') #Instalar
install.packages("cluster",dependencies = TRUE)
install.packages("clusteval",dependencies = TRUE)
install.packages("clusteval",dependencies = TRUE)
library(devtools)
install_github("ramhiser/clusteval")
library(devtools)
install_github("ramhiser/clusteval")
install.packages("clusteval",dependencies = TRUE)
grupo_1 <- c(1, 1, 2, 2, 1, 3, 3, 2, 1, 2) #10 objetos que fueron asignados a 3 grupos
grupo_2 <- c(1, 2, 2, 3, 1, 3, 2, 2, 3, 3) #10 objetos que fueron asignados a 3 grupos
indice_jaccard <- cluster_similarity(grupo_1,grupo_1, similarity = "jaccard")
install.packages("C:\Users\Israel\Downloads\clusteval_0.1.tar.gz", repos = NULL, type="source")
install.packages("C:\\Users\\Israel\\Downloads\\clusteval_0.1.tar.gz", repos = NULL, type="source")
library("cluster") #Instalat
library('clusteval') #Instalar
grupo_1 <- c(1, 1, 2, 2, 1, 3, 3, 2, 1, 2) #10 objetos que fueron asignados a 3 grupos
grupo_2 <- c(1, 2, 2, 3, 1, 3, 2, 2, 3, 3) #10 objetos que fueron asignados a 3 grupos
indice_jaccard <- cluster_similarity(grupo_1,grupo_1, similarity = "jaccard")
indice_jaccard
grupo_2 <- c(1, 2, 2, 3, 1, 3, 2, 2, 3, 4) #10 objetos que fueron asignados a 3 grupos
indice_jaccard <- cluster_similarity(grupo_1,grupo_1, similarity = "jaccard")
indice_jaccard
grupo_1 <- c(1, 1, 2, 2, 1, 3, 3, 2, 1, 2) #10 objetos que fueron asignados a 3 grupos
grupo_2 <- c(1, 2,6, 8, 1, 3, 2, 2, 3, 4) #10 objetos que fueron asignados a 3 grupos
indice_jaccard <- cluster_similarity(grupo_1,grupo_1, similarity = "jaccard")
indice_jaccard
install.packages('clusteval', dependencies = TRUE)
install.packages('clusteval', dependencies = TRUE)
install.packages("C:\\Users\\Israel\\Downloads\\clusteval_0.1.tar.gz", repos = NULL, type="source")
install.packages("C:\\Users\\Israel\\Downloads\\clusteval_0.1.tar.gz", repos = NULL, type="source", dependencies = TRUE)
library("cluster") #Instalat
library('clusteval') #Instalar
remove.packages("clusteval")
install.packages("C:\\Users\\Israel\\Downloads\\clusteval_0.1.tar.gz", repos = NULL, type="source", dependencies = TRUE)
install.packages("C:\\Users\\Israel\\Downloads\\clusteval_0.1.tar.gz", repos = NULL, type="source", dependencies = TRUE)
library("cluster") #Instalat
library('clusteval') #Instalar
grupo_1 <- c(1, 1, 2, 2, 1, 3, 3, 2, 1, 2) #10 objetos que fueron asignados a 3 grupos
grupo_2 <- c(1, 2,6, 8, 1, 3, 2, 2, 3, 4) #10 objetos que fueron asignados a 3 grupos
indice_jaccard <- cluster_similarity(grupo_1,grupo_1, similarity = "jaccard")
indice_jaccard
grupo_1 <- c(1, 1, 2, 2, 1, 3, 3, 2, 1, 2) #10 objetos que fueron asignados a 3 grupos
grupo_2 <- c(1, 2, 2, 3, 1, 3, 2, 2, 3, 3) #10 objetos que fueron asignados a 3 grupos
indice_jaccard <- cluster_similarity(grupo_1,grupo_1, similarity = "jaccard")
indice_jaccard
indice_jaccard <- cluster_similarity(grupo_1,grupo_2, similarity = "jaccard")
install.packages("phylotools",dependencies = TRUE)
library("ape")
read.dna("C:\Users\Israel\Documents\Codes\Taller de investigación\array-code\array-code-definitivo\datasets\primates_14.phylip",format = "interleaved")
read.dna("C:\\Users\\Israel\\Documents\\Codes\\Taller de investigación\\array-code\\array-code-definitivo\\datasets\\primates_14.phylip",format = "interleaved")
data <- ("C:\\Users\\Israel\\Documents\\Codes\\Taller de investigación\\array-code\\array-code-definitivo\\datasets\\primates_14.phylip",format = "interleaved")
data <- read.dna("C:\\Users\\Israel\\Documents\\Codes\\Taller de investigación\\array-code\\array-code-definitivo\\datasets\\primates_14.phylip",format = "interleaved")
data
data.matrix()
matriz_dna <- as.matrix(data)
matriz_sna
matriz_dna
df_dna <- as.data.frame(as.matrix(data))
View(df_dna)
View(df_dna)
df_dna <- as.data.frame(data)
View(df_dna)
data <- read.dna("C:\\Users\\Israel\\Documents\\Codes\\Taller de investigación\\array-code\\array-code-definitivo\\datasets\\primates_14.phylip",format = "interleaved", as.matrix = TRUE)
data
df_dna2 <- as.data.frame(data)
View(df_dna2)
rownames(data)
rownames(df_dna2)
matriz_dna <- as.matrix(data)
# Obtener los nombres de los taxones
nombres_taxones <- rownames(data)
# Convertir las secuencias a una matriz
matriz_dna <- as.matrix(data)
# Crear un data.frame con los nombres de los taxones y las secuencias
df_dna <- data.frame(Taxon = nombres_taxones, matriz_dna, stringsAsFactors = FALSE)
View(df_dna)
View(df_dna)
df_dna <- data.frame(Taxon = nombres_taxones, matriz_dna, stringsAsFactors = FALSE)
View(df_dna)
dim(df_dna)
print(nrow(df_dna))
print(ncol(df_dna))
nombres_taxones <- rownames(data)
nombre_taxones
nombres_taxones
typeof(nombres_taxones)
data <- read.dna("C:\\Users\\Israel\\Documents\\Codes\\Taller de investigación\\array-code\\array-code-definitivo\\datasets\\primates_14.phylip",format = "interleaved", as.matrix = TRUE)
# Obtener los nombres de los taxones
nombres_taxones <- rownames(datos_dna)
datos_dna <- read.dna("C:\\Users\\Israel\\Documents\\Codes\\Taller de investigación\\array-code\\array-code-definitivo\\datasets\\primates_14.phylip",format = "interleaved", as.matrix = TRUE)
# Obtener los nombres de los taxones
nombres_taxones <- rownames(datos_dna)
# Convertir las secuencias a una matriz (manteniendo el formato DNAbin)
matriz_dna <- as.matrix(datos_dna)
# Comprobar las dimensiones de la matriz de secuencias
dim(matriz_dna)
# Crear un data.frame combinando los nombres de los taxones y las secuencias
df_dna_final <- data.frame(Taxon = nombres_taxones, matriz_dna, stringsAsFactors = FALSE)
# Comprobar las dimensiones del nuevo data.frame
dim(df_dna_final)
# Obtener los nombres de los taxones
nombres_taxones <- rownames(datos_dna)
# Convertir las secuencias a una matriz (manteniendo el formato DNAbin)
matriz_dna <- as.matrix(datos_dna)
# Crear un data.frame combinando los nombres de los taxones y las secuencias
# Usar cbind para unir las columnas de manera correcta
df_dna_final <- data.frame(Taxon = nombres_taxones, as.data.frame(matriz_dna), stringsAsFactors = FALSE)
# Comprobar las dimensiones del nuevo data.frame
dim(df_dna_final)
# Ver las primeras filas del nuevo data.frame
head(df_dna_final)
View(df_dna_final)
dim(df_dna_final)
# Obtener los nombres de los taxones
nombres_taxones <- rownames(datos_dna)
# Convertir las secuencias a una matriz (manteniendo el formato DNAbin)
matriz_dna <- as.matrix(datos_dna)
# Comprobar las dimensiones de la matriz de secuencias
dim(matriz_dna)
# Crear un data.frame combinando los nombres de los taxones y las secuencias
df_dna_final <- data.frame(Taxon = nombres_taxones, matriz_dna, stringsAsFactors = FALSE)
# Comprobar las dimensiones del nuevo data.frame
dim(df_dna_final)
# Ver las primeras filas del nuevo data.frame
head(df_dna_final)
################################################################################
# Obtener los nombres de los taxones
nombres_taxones <- rownames(datos_dna)
# Convertir las secuencias a una matriz (manteniendo el formato DNAbin)
matriz_dna <- as.matrix(datos_dna)
# Crear un data.frame combinando los nombres de los taxones y las secuencias
# Usar cbind para unir las columnas de manera correcta
df_dna_final <- data.frame(Taxon = nombres_taxones, as.data.frame(matriz_dna), stringsAsFactors = FALSE)
# Comprobar las dimensiones del nuevo data.frame
dim(df_dna_final)
# Ver las primeras filas del nuevo data.frame
head(df_dna_final)
dim(df_dna_final)
# Obtener los nombres de los taxones
nombres_taxones <- rownames(datos_dna)
# Convertir las secuencias a una matriz (manteniendo el formato DNAbin)
matriz_dna <- as.matrix(datos_dna)
# Utilizar cbind para combinar los nombres de taxones y la matriz de secuencias
df_dna_final <- cbind(Taxon = nombres_taxones, matriz_dna)
# Obtener los nombres de los taxones
nombres_taxones <- rownames(datos_dna)
# Convertir las secuencias a una matriz manteniendo el formato DNAbin
matriz_dna <- as.matrix(datos_dna)
# Convertir la matriz de DNAbin a un data.frame
df_matriz_dna <- as.data.frame(matriz_dna)
# Crear un data.frame combinando los nombres de los taxones y las secuencias
df_dna_final <- data.frame(Taxon = nombres_taxones, df_matriz_dna, stringsAsFactors = FALSE)
# Verificar las dimensiones del nuevo data.frame
dim(df_dna_final)
# Ver las primeras filas del nuevo data.frame
head(df_dna_final)
View(df_dna_final)
matriz_dna_phydat <- as.phyDat(data)
matriz_dna_phydat <- as.phyDat.AAbin(data)
install.packages("phangorn",dependencies = TRUE)
datos_dna <- read.dna("C:\\Users\\Israel\\Documents\\Codes\\Taller de investigación\\array-code\\array-code-definitivo\\datasets\\primates_14.phylip",format = "interleaved")
# Convert the multiple sequence alignment result to a phyDat object for downstream analyses in phangorn
phyDat_msa_primate_sample = as.phyDat(datos_dna)
library("phangorn")
phyDat_msa_primate_sample = as.phyDat(datos_dna)
View(phyDat_msa_primate_sample)
phyDat_msa_primate_sample[["Mouse"]]
datos_dna <- read.dna("C:\\Users\\Israel\\Documents\\Codes\\Taller de investigación\\array-code\\array-code-definitivo\\datasets\\primates_14.phylip")
# Convert the multiple sequence alignment result to a phyDat object for downstream analyses in phangorn
phyDat_msa_primate_sample = as.phyDat(datos_dna)
View(phyDat_msa_primate_sample)
D_hamming = dist.hamming(phyDat_msa_primate_sample)
# Compute the Neighbor Joining tree
nj_tree = nj(D_hamming) #Aplica nj
nj_tree$edge.length[which(nj_tree$edge.length<0)]= 1 #Reemplaza los edges donde sea menor a cero por 1
nj_tree = midpoint(multi2di(nj_tree)) # Binariza los arboles
g_NJ  = plot_tree(nj_tree, "Neighbor Joining (NJ)", 0.3)
library("ggtree")       # For phylogenetic tree visualization
install.packages("ggtree",dependencies = TRUE)
install.packages("ggtree",dependencies = TRUE)
source("http://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
# Create plots for the NJ tree
# Specify titles for each plot
g_NJ  = plot_tree(nj_tree, "Neighbor Joining (NJ)", 0.3)
library("ggtree")       # For phylogenetic tree visualization
library("ggplot2")      # For plotting
library("gridExtra")    # For organizing plots in a grid
g_NJ  = plot_tree(nj_tree, "Neighbor Joining (NJ)", 0.3)
# Function to plot trees
plot_tree = function(tree_plot, title_plot, max_x) {
g = ggtree(tree_plot, color = "#00A499", size = 1)
# Customize the appearance of the plot and tip labels
g = g + geom_tiplab(size = 4, color = "black", align = TRUE) +
geom_nodepoint(size = 3, color = "#c7254e") +
labs(title = title_plot, size = 6) +
xlim(0, max_x) +
theme(
# Remove axis lines and text
axis.line = element_blank(),
axis.text = element_blank(),
# Remove all grids
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Adjust margins and legend position
plot.margin = margin(t = 0, r = -5, b = 0, l = 0, unit = "pt"),
legend.position = 'top'
)
# Create plots for the NJ tree
# Specify titles for each plot
g_NJ  = plot_tree(nj_tree, "Neighbor Joining (NJ)", 0.3)
)
# Function to plot trees
plot_tree = function(tree_plot, title_plot, max_x) {
g = ggtree(tree_plot, color = "#00A499", size = 1)
# Customize the appearance of the plot and tip labels
g = g + geom_tiplab(size = 4, color = "black", align = TRUE) +
geom_nodepoint(size = 3, color = "#c7254e") +
labs(title = title_plot, size = 6) +
xlim(0, max_x) +
theme(
# Remove axis lines and text
axis.line = element_blank(),
axis.text = element_blank(),
# Remove all grids
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Adjust margins and legend position
plot.margin = margin(t = 0, r = -5, b = 0, l = 0, unit = "pt"),
legend.position = 'top'
)
# Add labels for branch lengths with a smaller font size
g = g + geom_text(aes(x = branch, label = round(branch, 2)), size = 3, color = "black", vjust = -0.5, hjust = 0)
return(g)
}
# Create plots for the NJ tree
# Specify titles for each plot
g_NJ  = plot_tree(nj_tree, "Neighbor Joining (NJ)", 0.3)
View(g_NJ)
g_NJ  = plot_tree(nj_tree, "Neighbor Joining (NJ)", 0.3)
View(g_NJ)
library("gridExtra")    # For organizing plots in a grid
g_NJ  = plot_tree(nj_tree, "Neighbor Joining (NJ)", 0.3)
# Organize the two plots in a one-row, two-column grid
grid.arrange(g_NJ, nrow = 1, ncol = 1)
View(nj_tree)
